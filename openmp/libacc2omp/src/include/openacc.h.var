/*
 * include/openacc.h.var
 */

//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef __OPENACC__
#define __OPENACC__

// For standard types (e.g., size_t) used in OpenACC spec's declarations.
#include <stddef.h>

#define ACC2OMP_FOREACH_DEVICE(Macro)                                          \
  Macro(none)                                                                  \
  Macro(default)                                                               \
  Macro(host)                                                                  \
  Macro(not_host)

typedef enum {
#define ACC2OMP_DEVICE_ENUMERATOR(Device)                                      \
  acc_device_##Device,
ACC2OMP_FOREACH_DEVICE(ACC2OMP_DEVICE_ENUMERATOR)
#undef ACC2OMP_DEVICE_ENUMERATOR
} acc_device_t;

#define ACC2OMP_FOREACH_ASYNC(Macro)                                           \
  Macro(sync,    -1)                                                           \
  Macro(noval,   -2)                                                           \
  Macro(default, -3)

enum {
#define ACC2OMP_ASYNC_ENUMERATOR(Async, Val)                                   \
  acc_async_##Async = Val,
ACC2OMP_FOREACH_ASYNC(ACC2OMP_ASYNC_ENUMERATOR)
#undef ACC2OMP_ASYNC_ENUMERATOR
};

#ifdef __cplusplus
extern "C" {
#endif

void *acc_malloc(size_t bytes);
void acc_free(void *data_dev);
void *acc_copyin(void *data_arg, size_t bytes);
void *acc_present_or_copyin(void *data_arg, size_t bytes);
void *acc_pcopyin(void *data_arg, size_t bytes);
void *acc_create(void *data_arg, size_t bytes);
void *acc_present_or_create(void *data_arg, size_t bytes);
void *acc_pcreate(void *data_arg, size_t bytes);
void acc_copyout(void *data_arg, size_t bytes);
void acc_copyout_finalize(void *data_arg, size_t bytes);
void acc_delete(void *data_arg, size_t bytes);
void acc_delete_finalize(void *data_arg, size_t bytes);
void acc_update_device(void *data_arg, size_t bytes);
void acc_update_self(void *data_arg, size_t bytes);
void acc_map_data(void* data_arg, void* data_dev, size_t bytes);
void acc_unmap_data(void* data_arg);
void *acc_deviceptr(void *data_arg);
void *acc_hostptr(void *data_dev);
int acc_is_present(void *data_arg, size_t bytes);
void acc_memcpy_to_device(void *data_dev_dest, void *data_host_src,
                          size_t bytes);
void acc_memcpy_from_device(void *data_host_dest, void *data_dev_src,
                            size_t bytes);
void acc_memcpy_device(void *data_dev_dest, void *data_dev_src, size_t bytes);
void acc_memcpy_d2d(void *data_arg_dest, void *data_arg_src, size_t bytes,
                    int dev_num_dest, int dev_num_src);

#ifdef __cplusplus
} // extern "C"
#endif

#endif /* __OPENACC__ */
