# Instead of using artifacts, just build in an NFS-mounted directory,
# $BUILD_DIR, that's unique to each pipeline in case there are concurrent
# pipelines.  Why not use artifacts?
#
# - LLVM's build directory is huge.  For me, it's 46G when including just
#   the clang and openmp subprojects, which are required for Clacc, and it's
#   85G when including nearly all subprojects.
# - At this size, it takes a long time to upload/download between stages and
#   can be rejected as an upload because of its size.  For me, it added 20
#   min to the already 30 min build of that 46G and then was rejected.
# - Artifacts are posted for download and stored long past when it's useful
#   for humans to download the LLVM build directory, which is typically
#   never.
# - We could squash the pipeline to one stage to avoid the need for
#   artifacts, but pipeline stages are a convenient way to view results when
#   debugging.
#
# The NFS solution used here is based on the following comment (which is in
# response to a proposal for a gitlab feature that would solve this
# problem):
#
#   https://gitlab.com/gitlab-org/gitlab/issues/29265#note_225288132
#
# However, because the NFS-mounted build directory name is different for each
# pipeline, ccache misses if we compile within it.  Thus, we set
# CCACHE_NOHASHDIR and CCACHE_BASEDIR (neither alone proves sufficient), as
# suggested by the ccache manual.  CCACHE_NOHASHDIR can lead to incorrect
# directory names in debugging symbols, but currently we don't expect those to
# matter to our CI builds.
variables:
  BUILD_DIR_PROJ: $CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds
  BUILD_DIR: $CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds/$CI_PIPELINE_ID-$BUILD_ID
  BUILD_DIRS: $CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds/$CI_PIPELINE_ID-*
  LLVM_CCACHE_PARAMS: 'CCACHE_CPP2=yes CCACHE_NOHASHDIR=yes CCACHE_BASEDIR=$CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds'
  CMAKE: cmake3

stages:
  - setup
  - config
  - build
  - test-clacc
  - test-all
  - cleanup

#-------------------------------------------------
# branch/tag filters
#-------------------------------------------------

.clacc:
  only: [/^clacc$/, /^clacc-/, /-openacc$/, /-openacc-/]
  except: [/^clacc-ci-/]

.not-clacc:
  only: [/^clacc-ci-/, /^jdenny-/]
  except: [/-openacc$/, /-openacc-/]

#-------------------------------------------------
# build configurations
#
# Test every architecture with a debug build (thus checking assertions) using
# python3.  There are many kolds, so use them to check configuration choices
# that are hopefully orthogonal to the architecture.
#-------------------------------------------------

.leconte:
  tags: [shell, leconte]
  variables:
    BUILD_ID: leconte
    MODULES: gnu/7.5.0 cuda/10.1
    CMAKE_BUILD_TYPE: Debug
    PYTHON: /usr/bin/python3
    CMAKE_OFFLOAD_CONFIG:
      -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_70
      -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=70
      -DCLANG_ACC_TEST_EXE_X86_64=False
      -DCLANG_ACC_TEST_EXE_PPC64LE=True
      -DCLANG_ACC_TEST_EXE_NVPTX64=True

.kold:
  tags: [shell, kold]
  variables:
    BUILD_ID: kold
    MODULES: gnu/9.1.0
    CMAKE_BUILD_TYPE: Debug
    PYTHON: /usr/bin/python3
    CMAKE_OFFLOAD_CONFIG:
      -DCLANG_ACC_TEST_EXE_X86_64=True
      -DCLANG_ACC_TEST_EXE_PPC64LE=False
      -DCLANG_ACC_TEST_EXE_NVPTX64=False

# Sometimes bugs cause only release builds to fail.  For example, debugging
# macros might accidentally be used but not defined in release builds.
.release:
  tags: [shell, kold]
  variables:
    BUILD_ID: release
    MODULES: gnu/9.1.0
    CMAKE_BUILD_TYPE: Release
    PYTHON: /usr/bin/python3
    CMAKE_OFFLOAD_CONFIG:
      -DCLANG_ACC_TEST_EXE_X86_64=True
      -DCLANG_ACC_TEST_EXE_PPC64LE=False
      -DCLANG_ACC_TEST_EXE_NVPTX64=False

.python2:
  tags: [shell, kold]
  variables:
    BUILD_ID: python2
    MODULES: gnu/9.1.0
    CMAKE_BUILD_TYPE: Debug
    PYTHON: /usr/bin/python2
    CMAKE_OFFLOAD_CONFIG:
      -DCLANG_ACC_TEST_EXE_X86_64=True
      -DCLANG_ACC_TEST_EXE_PPC64LE=False
      -DCLANG_ACC_TEST_EXE_NVPTX64=False

# Not setup or cleanup.
.non-utility:
  dependencies: []
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo $MODULES
    - module load $MODULES
    - pwd
    - echo $BUILD_DIR
    - cd $BUILD_DIR/build
  after_script:
    - echo "$LLVM_CCACHE_PARAMS"
    - env $LLVM_CCACHE_PARAMS ccache -sp
    - du -hs $BUILD_DIR/build

#-------------------------------------------------
# setup
#-------------------------------------------------

.setup:
  stage: setup
  script:
    - pwd
    - echo $BUILD_DIR_PROJ
    # Try to remove anything older than 6 hours that was left by a previous
    # pipeline for this project.  Doing this in the setup stage instead of
    # cleanup stage ensures that it runs before a new job even if prior jobs
    # failed or were canceled.
    - find $BUILD_DIR_PROJ -mmin +360 -delete || true
    - mkdir -p $BUILD_DIR_PROJ
    - echo $BUILD_DIR
    # Remove this build config's build directory if it already exists.  It
    # might exist if, for example, this setup job previously failed due to a
    # transient Gitlab/ExCL problem.
    - rm -rf $BUILD_DIR
    - mkdir $BUILD_DIR
    - mkdir $BUILD_DIR/build
    # Clone the runner's git clone into the NFS-mounted build directory.  We
    # cannot use the runner's git clone directly because its location relative
    # to the build directory varies across runners, and that would cause ccache
    # to miss whenever the runner changes no matter how we set CCACHE_BASEDIR.
    # We've also tried creating a symlink to the runner's git clone at the
    # start of every job, but that causes ccache to miss in the same manner, so
    # apparently the symlink is expanded somewhere.
    - git --version
    - time git clone `pwd` $BUILD_DIR/source

leconte (setup):
  extends: [.leconte, .setup]

kold (setup):
  extends: [.kold, .setup]

release (setup):
  extends: [.release, .setup]

python2 (setup):
  extends: [.python2, .setup]

#-------------------------------------------------
# cleanup
#-------------------------------------------------

.cleanup:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - pwd
    - echo $BUILD_DIR
    - rm -rf $BUILD_DIR
    - rmdir $BUILD_DIR_PROJ || true

leconte (cleanup, clacc):
  extends: [.leconte, .clacc, .cleanup]
  needs:
    - job: "leconte (test-all, clacc)"
      artifacts: false

leconte (cleanup):
  extends: [.leconte, .not-clacc, .cleanup]
  needs:
    - job: leconte (test-all)
      artifacts: false

kold (cleanup, clacc):
  extends: [.kold, .clacc, .cleanup]
  needs:
    - job: "kold (test-all, clacc)"
      artifacts: false

kold (cleanup):
  extends: [.kold, .not-clacc, .cleanup]
  needs:
    - job: kold (test-all)
      artifacts: false

release (cleanup):
  extends: [.release, .cleanup]
  needs:
    - job: release (test-all)
      artifacts: false

python2 (cleanup):
  extends: [.python2, .cleanup]
  needs:
    - job: python2 (test-all)
      artifacts: false

z-cleanup-pipeline-builds:
  stage: setup
  when: manual
  tags: [shell, kold]
  variables:
    GIT_STRATEGY: none
  script:
    - echo $BUILD_DIRS
    - rm -rf $BUILD_DIRS

z-cleanup-project-builds:
  stage: setup
  when: manual
  tags: [shell, kold]
  variables:
    GIT_STRATEGY: none
  script:
    - echo $BUILD_DIR_PROJ
    - rm -rf $BUILD_DIR_PROJ

#-------------------------------------------------
# config
#-------------------------------------------------

.config:
  extends: .non-utility
  stage: config
  script:
    - echo $CMAKE
    - $CMAKE --version
    - echo $CMAKE_BUILD_TYPE
    - echo $GCC_DIR
    - echo $PYTHON
    - $PYTHON --version
    - echo $LLVM_CCACHE_PARAMS
    - echo $CMAKE_OFFLOAD_CONFIG
    - time $CMAKE -G Ninja
                  -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
                  -DLLVM_CCACHE_BUILD=ON
                  -DLLVM_USE_SPLIT_DWARF=true
                  -DLLVM_USE_LINKER=gold
                  -DCMAKE_C_COMPILER=gcc
                  -DCMAKE_CXX_COMPILER=g++
                  -DGCC_INSTALL_PREFIX=$GCC_DIR
                  -DLLVM_ENABLE_PROJECTS='clang;openmp'
                  -DPython3_EXECUTABLE=$PYTHON
                  -DLLVM_CCACHE_PARAMS="$LLVM_CCACHE_PARAMS"
                  -DLLVM_LIT_ARGS='-s -vv'
                  $CMAKE_OFFLOAD_CONFIG
                  ../source/llvm
      |& tee $CI_PROJECT_DIR/cmake-log.txt
    - cp CMakeCache.txt $CI_PROJECT_DIR
  artifacts:
    when: always
    paths: [cmake-log.txt, CMakeCache.txt]

leconte (config):
  extends: [.leconte, .config]
  needs:
    - job: leconte (setup)
      artifacts: false

kold (config):
  extends: [.kold, .config]
  needs:
    - job: kold (setup)
      artifacts: false

release (config):
  extends: [.release, .config]
  needs:
    - job: release (setup)
      artifacts: false

python2 (config):
  extends: [.python2, .config]
  needs:
    - job: python2 (setup)
      artifacts: false

#-------------------------------------------------
# build
#-------------------------------------------------

.build:
  extends: .non-utility
  stage: build
  script:
    - time ninja-build -l `nproc` |& tee $CI_PROJECT_DIR/build-log.txt
  artifacts:
    when: always
    paths: [build-log.txt]

leconte (build):
  extends: [.leconte, .build]
  needs:
    - job: leconte (config)
      artifacts: false

kold (build):
  extends: [.kold, .build]
  needs:
    - job: kold (config)
      artifacts: false

release (build):
  extends: [.release, .build]
  needs:
    - job: release (config)
      artifacts: false

python2 (build):
  extends: [.python2, .build]
  needs:
    - job: python2 (config)
      artifacts: false

#-------------------------------------------------
# tests
#
# Run Clacc tests before check-all and in a separate stage.  This permits us
# to discover Clacc test fails sooner after a push, and it makes it easy to
# see whether all Clacc tests have succeeded without the need to hunt the
# results of a check-all that has failed due to some upstream problem that
# does not concern Clacc.  check-all then repeats those Clacc tests
# unfortunately, but that's ok as the Clacc tests are relatively fast.
#
# The additional build required for the test suite can be very noisy and
# exceed the log output limit.  Run that first, grep for key text, and
# make the full version an artifact.
#
# When there are fails, the test suite run can be very noisy too and
# exceed the log output limit.  It's hard to grep for just the important
# stuff, so just print it all but also dump to an artifact.
#-------------------------------------------------

.test:
  extends: .non-utility
  script:
    - echo $CHECK_TARGETS
    - time LIT_OPTS='--filter=xxxxxxxxx --allow-empty-runs'
      ninja-build -l `nproc` $CHECK_TARGETS
      |& tee $CI_PROJECT_DIR/test-build-log.txt
      | grep '^\[[0-9]\+/[0-9]\+]\|\<error:'
    - for check_target in $CHECK_TARGETS; do
        echo "check_target=$check_target" &&
        time FILECHECK_OPTS='-dump-input-filter=all -vv -color'
             LIT_OPTS="--xunit-xml-output $CI_PROJECT_DIR/$check_target.xml"
             ninja-build -l `nproc` $check_target
        |& tee $CI_PROJECT_DIR/$check_target-log.txt;
      done
  artifacts:
    when: always
    paths: [test-build-log.txt, check-*-log.txt, check-*.xml]
    reports:
      junit: check-*.xml

.test-clacc:
  extends: [.clacc, .test]
  stage: test-clacc
  variables:
    CHECK_TARGETS: 'check-clang-openacc check-libomp'

.test-all:
  extends: [.test]
  stage: test-all
  variables:
    CHECK_TARGETS: check-all

leconte (test-clacc):
  extends: [.leconte, .test-clacc]
  needs:
    - job: leconte (build)
      artifacts: false

leconte (test-all, clacc):
  extends: [.leconte, .clacc, .test-all]
  needs:
    - job: leconte (test-clacc)
      artifacts: false

leconte (test-all):
  extends: [.leconte, .not-clacc, .test-all]
  needs:
    - job: leconte (build)
      artifacts: false

kold (test-clacc):
  extends: [.kold, .test-clacc]
  needs:
    - job: kold (build)
      artifacts: false

kold (test-all, clacc):
  extends: [.kold, .clacc, .test-all]
  needs:
    - job: kold (test-clacc)
      artifacts: false

kold (test-all):
  extends: [.kold, .not-clacc, .test-all]
  needs:
    - job: kold (build)
      artifacts: false

release (test-all):
  extends: [.release, .test-all]
  needs:
    - job: release (build)
      artifacts: false

python2 (test-all):
  extends: [.python2, .test-all]
  needs:
    - job: python2 (build)
      artifacts: false
