//===--- OpenACCKinds.def - OpenACC directives and clauses list --*- C++ -*-==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
/// \file
/// This file defines the list of supported OpenACC directives, clauses, and
/// data attributes.
///
//===----------------------------------------------------------------------===//

#ifndef OPENACC_DIRECTIVE
#  define OPENACC_DIRECTIVE(Name)
#endif
#ifndef OPENACC_DIRECTIVE_EXT
#  define OPENACC_DIRECTIVE_EXT(Name, Str)
#endif
#ifndef OPENACC_BASE_DA
#  define OPENACC_BASE_DA(Name)
#endif
#ifndef OPENACC_REDUCTION_BASE_DA
#  define OPENACC_REDUCTION_BASE_DA(Name)
#endif
#ifndef OPENACC_CLAUSE
#  define OPENACC_CLAUSE(Name, Class)
#endif
#ifndef OPENACC_CLAUSE_ALIAS
#  define OPENACC_CLAUSE_ALIAS(ClauseAlias, AliasedClause, Class) \
     OPENACC_CLAUSE_ALIAS_##AliasedClause(ClauseAlias)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_copy
#  define OPENACC_CLAUSE_ALIAS_copy(Name)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_copyin
#  define OPENACC_CLAUSE_ALIAS_copyin(Name)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_copyout
#  define OPENACC_CLAUSE_ALIAS_copyout(Name)
#endif
#ifndef OPENACC_PARALLEL_BASE_DA
#  define OPENACC_PARALLEL_BASE_DA(Name)
#endif
#ifndef OPENACC_LOOP_BASE_DA
#  define OPENACC_LOOP_BASE_DA(Name)
#endif
#ifndef OPENACC_PARALLEL_CLAUSE
#  define OPENACC_PARALLEL_CLAUSE(Name)
#endif
#ifndef OPENACC_LOOP_CLAUSE
#  define OPENACC_LOOP_CLAUSE(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_CLAUSE
#  define OPENACC_PARALLEL_LOOP_CLAUSE(Name)
#endif
#ifndef OPENACC_PARALLEL_PARENT
#  define OPENACC_PARALLEL_PARENT(Name)
#endif
#ifndef OPENACC_LOOP_PARENT
#  define OPENACC_LOOP_PARENT(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_PARENT
#  define OPENACC_PARALLEL_LOOP_PARENT(Name)
#endif

#define OPENACC_ALIASED_CLAUSE(Def, Name, Class) \
  Def(Name, Class)                               \
  OPENACC_CLAUSE_ALIAS_##Name(Name)
#define OPENACC_CLAUSE_AND_BASE_DA(Name, Class) \
  OPENACC_BASE_DA(Name)                         \
  OPENACC_CLAUSE(Name, Class)
#define OPENACC_CLAUSE_AND_REDUCTION_BASE_DA(Name, Class) \
  OPENACC_CLAUSE_AND_BASE_DA(Name, Class)                 \
  OPENACC_REDUCTION_BASE_DA(Name)
#define OPENACC_PARALLEL_CLAUSE_AND_BASE_DA(Name) \
  OPENACC_PARALLEL_BASE_DA(Name)                  \
  OPENACC_PARALLEL_CLAUSE(Name)
#define OPENACC_LOOP_CLAUSE_AND_BASE_DA(Name) \
  OPENACC_LOOP_BASE_DA(Name)                  \
  OPENACC_LOOP_CLAUSE(Name)

// OpenACC directives.
OPENACC_DIRECTIVE(parallel)
OPENACC_DIRECTIVE(loop)
OPENACC_DIRECTIVE_EXT(parallel_loop, "parallel loop")

// OpenACC clauses and base data attributes (DAs).
//
// We define base DAs as DAs other than reductions.  For any variable on any
// OpenACC construct, the base DAs are mutually exclusive, but most can be
// combined with a reduction.  The exceptions are firstprivate, private, and
// shared.  The OpenACC 2.6 spec doesn't actually say that these combinations
// are not permitted (and shared is not actually part of the OpenACC spec).
// However, a reduction implies visibility at the beginning and end of the
// construct and privacy within (among gangs or loop iterations), so any of
// firstprivate, private, and shared would contradict the reduction.  The
// OpenMP implementation also has this restriction.
//
// Every base DA is also a clause and has an ACC*Clause class so it can be
// stored like a predetermined/implicit clause even if it's not permitted as
// an explicit clause on any directive (e.g., ACCSharedClause).  Thus, define
// every base DA with either OPENACC_CLAUSE_AND_BASE_DA (a base DA not
// combinable with a reduction) or OPENACC_CLAUSE_AND_REDUCTION_BASE_DA (a
// base DA combinable with a reduction) and never with either OPENACC_BASE_DA
// or OPENACC_REDUCTION_BASE_DA directly.
//
// Among a set of aliases for a clause, one is the canonical name used in most
// occurrences in the OpenACC spec and other documentation.  For brevity, we
// refer to it as the "aliased clause" (such as "copy") and the others as the
// "clause aliases" (such as "pcopy" and "present_or_copy").  An aliased clause
// should be defined below with OPENACC_ALIASED_CLAUSE such that the first
// argument is the macro that is determined by the discussion in the previous
// paragraphs, and it should be defined later as being permitted on various
// directives with OPENACC_<Directive>_CLAUSE[_AND_BASE_DA].  Every clause
// alias should be defined below with only OPENACC_CLAUSE_ALIAS such that the
// specified ACC*Clause class is the same as for the aliased clause, and it
// should also be defined later as being permitted on various directives with
// only OPENACC_<Directive>_CLAUSE.  Clang handles each clause alias exactly
// like the aliased clause except it parses and prints each clause alias
// (including in parser diagnostics) under its own name.  Thus, each clause
// alias has a separate member in OpenACCClauseKind but not in
// OpenACCBaseDAKind, where at most the aliased clause appears (sema
// diagnostics often use just the aliased clause's name).  A clause alias
// shares the same ACC*Clause class as the aliased clause, but objects of the
// class store the individual OpenACCClauseKind so they can be printed
// correctly.  So that an aliased clause and all its aliases are handled
// consistently, Clang should never reference their OpenACCClauseKind members
// directly except that the member for the aliased clause must be referenced
// within the ACC*Clause class and when constructing the ACC*Clause object for
// an implicit clause.  In all other cases, they should all be handled with a
// common pattern, as follows. To iterate the OpenACCClauseKind members for a
// specific aliased clause and all its aliases, Clang should define
// OPENACC_CLAUSE_ALIAS_<AliasedClause> and then include this file.  To iterate
// the OpenACCClauseKind members for all aliased clauses and their aliases,
// Clang should define OPENACC_CLAUSE and OPENACC_CLAUSE_ALIAS and then include
// this file.  Finally, to iterate all ACC*Clause classes, Clang should define
// only OPENACC_CLAUSE and then include this file.
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE_AND_REDUCTION_BASE_DA,
                       copy, ACCCopyClause)
OPENACC_CLAUSE_ALIAS(pcopy, copy, ACCCopyClause)
OPENACC_CLAUSE_ALIAS(present_or_copy, copy, ACCCopyClause)
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE_AND_REDUCTION_BASE_DA,
                       copyin, ACCCopyinClause)
OPENACC_CLAUSE_ALIAS(pcopyin, copyin, ACCCopyinClause)
OPENACC_CLAUSE_ALIAS(present_or_copyin, copyin, ACCCopyinClause)
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE_AND_REDUCTION_BASE_DA,
                       copyout, ACCCopyoutClause)
OPENACC_CLAUSE_ALIAS(pcopyout, copyout, ACCCopyoutClause)
OPENACC_CLAUSE_ALIAS(present_or_copyout, copyout, ACCCopyoutClause)
OPENACC_CLAUSE_AND_BASE_DA(shared, ACCSharedClause)
OPENACC_CLAUSE_AND_BASE_DA(private, ACCPrivateClause)
OPENACC_CLAUSE_AND_BASE_DA(firstprivate, ACCFirstprivateClause)
OPENACC_CLAUSE(reduction, ACCReductionClause)
OPENACC_CLAUSE(num_gangs, ACCNumGangsClause)
OPENACC_CLAUSE(num_workers, ACCNumWorkersClause)
OPENACC_CLAUSE(vector_length, ACCVectorLengthClause)
OPENACC_CLAUSE(seq, ACCSeqClause)
OPENACC_CLAUSE(independent, ACCIndependentClause)
OPENACC_CLAUSE(auto, ACCAutoClause)
OPENACC_CLAUSE(gang, ACCGangClause)
OPENACC_CLAUSE(worker, ACCWorkerClause)
OPENACC_CLAUSE(vector, ACCVectorClause)
OPENACC_CLAUSE(collapse, ACCCollapseClause)

// Explicit clauses and base DAs allowed for OpenACC directive 'parallel'.
OPENACC_PARALLEL_CLAUSE_AND_BASE_DA(copy)
OPENACC_PARALLEL_CLAUSE(pcopy)
OPENACC_PARALLEL_CLAUSE(present_or_copy)
OPENACC_PARALLEL_CLAUSE_AND_BASE_DA(copyin)
OPENACC_PARALLEL_CLAUSE(pcopyin)
OPENACC_PARALLEL_CLAUSE(present_or_copyin)
OPENACC_PARALLEL_CLAUSE_AND_BASE_DA(copyout)
OPENACC_PARALLEL_CLAUSE(pcopyout)
OPENACC_PARALLEL_CLAUSE(present_or_copyout)
OPENACC_PARALLEL_CLAUSE_AND_BASE_DA(private)
OPENACC_PARALLEL_CLAUSE_AND_BASE_DA(firstprivate)
OPENACC_PARALLEL_CLAUSE(reduction)
OPENACC_PARALLEL_CLAUSE(num_gangs)
OPENACC_PARALLEL_CLAUSE(num_workers)
OPENACC_PARALLEL_CLAUSE(vector_length)

// Explicit clauses and base DAs allowed for OpenACC directive 'loop'.
OPENACC_LOOP_CLAUSE(seq)
OPENACC_LOOP_CLAUSE(independent)
OPENACC_LOOP_CLAUSE(auto)
OPENACC_LOOP_CLAUSE(gang)
OPENACC_LOOP_CLAUSE(worker)
OPENACC_LOOP_CLAUSE(vector)
OPENACC_LOOP_BASE_DA(shared)
OPENACC_LOOP_CLAUSE_AND_BASE_DA(private)
OPENACC_LOOP_CLAUSE(reduction)
OPENACC_LOOP_CLAUSE(collapse)

// Explicit clauses allowed for OpenACC directive 'parallel loop'.  DAs are
// checked only for effective directives, so there's need to list them here.
OPENACC_PARALLEL_LOOP_CLAUSE(copy)
OPENACC_PARALLEL_LOOP_CLAUSE(pcopy)
OPENACC_PARALLEL_LOOP_CLAUSE(present_or_copy)
OPENACC_PARALLEL_LOOP_CLAUSE(copyin)
OPENACC_PARALLEL_LOOP_CLAUSE(pcopyin)
OPENACC_PARALLEL_LOOP_CLAUSE(present_or_copyin)
OPENACC_PARALLEL_LOOP_CLAUSE(copyout)
OPENACC_PARALLEL_LOOP_CLAUSE(pcopyout)
OPENACC_PARALLEL_LOOP_CLAUSE(present_or_copyout)
OPENACC_PARALLEL_LOOP_CLAUSE(private)
OPENACC_PARALLEL_LOOP_CLAUSE(firstprivate)
OPENACC_PARALLEL_LOOP_CLAUSE(reduction)
OPENACC_PARALLEL_LOOP_CLAUSE(num_gangs)
OPENACC_PARALLEL_LOOP_CLAUSE(num_workers)
OPENACC_PARALLEL_LOOP_CLAUSE(vector_length)
OPENACC_PARALLEL_LOOP_CLAUSE(seq)
OPENACC_PARALLEL_LOOP_CLAUSE(independent)
OPENACC_PARALLEL_LOOP_CLAUSE(auto)
OPENACC_PARALLEL_LOOP_CLAUSE(gang)
OPENACC_PARALLEL_LOOP_CLAUSE(worker)
OPENACC_PARALLEL_LOOP_CLAUSE(vector)
OPENACC_PARALLEL_LOOP_CLAUSE(collapse)

// Parent directives allowed for 'parallel'.
OPENACC_PARALLEL_PARENT(unknown)

// Parent directives allowed for 'loop'.
OPENACC_LOOP_PARENT(parallel)
OPENACC_LOOP_PARENT(loop)
OPENACC_LOOP_PARENT(parallel_loop)

// Parent directives allowed for 'parallel_loop'.
OPENACC_PARALLEL_LOOP_PARENT(unknown)

#undef OPENACC_DIRECTIVE
#undef OPENACC_DIRECTIVE_EXT
#undef OPENACC_BASE_DA
#undef OPENACC_REDUCTION_BASE_DA
#undef OPENACC_CLAUSE
#undef OPENACC_CLAUSE_ALIAS
#undef OPENACC_CLAUSE_ALIAS_copy
#undef OPENACC_CLAUSE_ALIAS_copyin
#undef OPENACC_CLAUSE_ALIAS_copyout
#undef OPENACC_PARALLEL_BASE_DA
#undef OPENACC_LOOP_BASE_DA
#undef OPENACC_PARALLEL_CLAUSE
#undef OPENACC_LOOP_CLAUSE
#undef OPENACC_PARALLEL_LOOP_CLAUSE
#undef OPENACC_PARALLEL_PARENT
#undef OPENACC_LOOP_PARENT
#undef OPENACC_PARALLEL_LOOP_PARENT
#undef OPENACC_ALIASED_CLAUSE
#undef OPENACC_CLAUSE_AND_BASE_DA
#undef OPENACC_CLAUSE_AND_REDUCTION_BASE_DA
#undef OPENACC_PARALLEL_CLAUSE_AND_BASE_DA
#undef OPENACC_LOOP_CLAUSE_AND_BASE_DA
