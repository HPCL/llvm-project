//===--- OpenACCKinds.def - OpenACC directives and clauses list --*- C++ -*-==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
/// \file
/// This file defines the list of supported OpenACC directives, clauses, and
/// data-sharing attributes.
///
//===----------------------------------------------------------------------===//

#ifndef OPENACC_DIRECTIVE
#  define OPENACC_DIRECTIVE(Name)
#endif
#ifndef OPENACC_DIRECTIVE_EXT
#  define OPENACC_DIRECTIVE_EXT(Name, Str)
#endif
#ifndef OPENACC_BASE_DSA
#  define OPENACC_BASE_DSA(Name)
#endif
#ifndef OPENACC_REDUCTION_BASE_DSA
#  define OPENACC_REDUCTION_BASE_DSA(Name)
#endif
#ifndef OPENACC_CLAUSE
#  define OPENACC_CLAUSE(Name, Class)
#endif
#ifndef OPENACC_PARALLEL_BASE_DSA
#  define OPENACC_PARALLEL_BASE_DSA(Name)
#endif
#ifndef OPENACC_LOOP_BASE_DSA
#  define OPENACC_LOOP_BASE_DSA(Name)
#endif
#ifndef OPENACC_PARALLEL_CLAUSE
#  define OPENACC_PARALLEL_CLAUSE(Name)
#endif
#ifndef OPENACC_LOOP_CLAUSE
#  define OPENACC_LOOP_CLAUSE(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_CLAUSE
#  define OPENACC_PARALLEL_LOOP_CLAUSE(Name)
#endif
#ifndef OPENACC_PARALLEL_PARENT
#  define OPENACC_PARALLEL_PARENT(Name)
#endif
#ifndef OPENACC_LOOP_PARENT
#  define OPENACC_LOOP_PARENT(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_PARENT
#  define OPENACC_PARALLEL_LOOP_PARENT(Name)
#endif

#define OPENACC_CLAUSE_AND_BASE_DSA(Name, Class) \
  OPENACC_BASE_DSA(Name) \
  OPENACC_CLAUSE(Name, Class)
#define OPENACC_CLAUSE_AND_REDUCTION_BASE_DSA(Name, Class) \
  OPENACC_CLAUSE_AND_BASE_DSA(Name, Class) \
  OPENACC_REDUCTION_BASE_DSA(Name)
#define OPENACC_PARALLEL_CLAUSE_AND_BASE_DSA(Name) \
  OPENACC_PARALLEL_BASE_DSA(Name) \
  OPENACC_PARALLEL_CLAUSE(Name)
#define OPENACC_LOOP_CLAUSE_AND_BASE_DSA(Name) \
  OPENACC_LOOP_BASE_DSA(Name) \
  OPENACC_LOOP_CLAUSE(Name)

// OpenACC directives.
OPENACC_DIRECTIVE(parallel)
OPENACC_DIRECTIVE(loop)
OPENACC_DIRECTIVE_EXT(parallel_loop, "parallel loop")

// OpenACC clauses and base data-sharing attributes (DSAs).
//
// We define base DSAs as DSAs other than reductions.  For any variable on any
// OpenACC construct, the base DSAs are mutually exclusive, but most can be
// combined with a reduction.  The exceptions are firstprivate, private, and
// shared.  The OpenACC 2.6 spec doesn't actually say that these combinations
// are not permitted (and shared is not actually part of the OpenACC spec).
// However, a reduction implies visibility at the beginning and end of the
// construct and privacy within (among gangs or loop iterations), so any of
// firstprivate, private, and shared would contradict the reduction.  The
// OpenMP implementation also has this restriction.
//
// Every base DSA is also a clause and has an ACC*Clause class so it can be
// stored like a predetermined/implicit clause even if it's not permitted as
// an explicit clause on any directive (e.g., ACCSharedClause).  Thus, define
// every base DSA with either OPENACC_CLAUSE_AND_BASE_DSA (a base DSA not
// combinable with a reduction) or OPENACC_CLAUSE_AND_REDUCTION_BASE_DSA (a
// base DSA combinable with a reduction) and never with either OPENACC_BASE_DSA
// or OPENACC_REDUCTION_BASE_DSA directly.
OPENACC_CLAUSE_AND_REDUCTION_BASE_DSA(copy, ACCCopyClause)
OPENACC_CLAUSE_AND_BASE_DSA(shared, ACCSharedClause)
OPENACC_CLAUSE_AND_BASE_DSA(private, ACCPrivateClause)
OPENACC_CLAUSE_AND_BASE_DSA(firstprivate, ACCFirstprivateClause)
OPENACC_CLAUSE(reduction, ACCReductionClause)
OPENACC_CLAUSE(num_gangs, ACCNumGangsClause)
OPENACC_CLAUSE(num_workers, ACCNumWorkersClause)
OPENACC_CLAUSE(vector_length, ACCVectorLengthClause)
OPENACC_CLAUSE(seq, ACCSeqClause)
OPENACC_CLAUSE(independent, ACCIndependentClause)
OPENACC_CLAUSE(auto, ACCAutoClause)
OPENACC_CLAUSE(gang, ACCGangClause)
OPENACC_CLAUSE(worker, ACCWorkerClause)
OPENACC_CLAUSE(vector, ACCVectorClause)
OPENACC_CLAUSE(collapse, ACCCollapseClause)

// Explicit clauses and base DSAs allowed for OpenACC directive 'parallel'.
OPENACC_PARALLEL_CLAUSE_AND_BASE_DSA(copy)
OPENACC_PARALLEL_CLAUSE_AND_BASE_DSA(private)
OPENACC_PARALLEL_CLAUSE_AND_BASE_DSA(firstprivate)
OPENACC_PARALLEL_CLAUSE(reduction)
OPENACC_PARALLEL_CLAUSE(num_gangs)
OPENACC_PARALLEL_CLAUSE(num_workers)
OPENACC_PARALLEL_CLAUSE(vector_length)

// Explicit clauses and base DSAs allowed for OpenACC directive 'loop'.
OPENACC_LOOP_CLAUSE(seq)
OPENACC_LOOP_CLAUSE(independent)
OPENACC_LOOP_CLAUSE(auto)
OPENACC_LOOP_CLAUSE(gang)
OPENACC_LOOP_CLAUSE(worker)
OPENACC_LOOP_CLAUSE(vector)
OPENACC_LOOP_BASE_DSA(shared)
OPENACC_LOOP_CLAUSE_AND_BASE_DSA(private)
OPENACC_LOOP_CLAUSE(reduction)
OPENACC_LOOP_CLAUSE(collapse)

// Explicit clauses allowed for OpenACC directive 'parallel loop'.  DSAs are
// checked only for effective directives, so there's need to list them here.
OPENACC_PARALLEL_LOOP_CLAUSE(copy)
OPENACC_PARALLEL_LOOP_CLAUSE(private)
OPENACC_PARALLEL_LOOP_CLAUSE(firstprivate)
OPENACC_PARALLEL_LOOP_CLAUSE(reduction)
OPENACC_PARALLEL_LOOP_CLAUSE(num_gangs)
OPENACC_PARALLEL_LOOP_CLAUSE(num_workers)
OPENACC_PARALLEL_LOOP_CLAUSE(vector_length)
OPENACC_PARALLEL_LOOP_CLAUSE(seq)
OPENACC_PARALLEL_LOOP_CLAUSE(independent)
OPENACC_PARALLEL_LOOP_CLAUSE(auto)
OPENACC_PARALLEL_LOOP_CLAUSE(gang)
OPENACC_PARALLEL_LOOP_CLAUSE(worker)
OPENACC_PARALLEL_LOOP_CLAUSE(vector)
OPENACC_PARALLEL_LOOP_CLAUSE(collapse)

// Parent directives allowed for 'parallel'.
OPENACC_PARALLEL_PARENT(unknown)

// Parent directives allowed for 'loop'.
OPENACC_LOOP_PARENT(parallel)
OPENACC_LOOP_PARENT(loop)
OPENACC_LOOP_PARENT(parallel_loop)

// Parent directives allowed for 'parallel_loop'.
OPENACC_PARALLEL_LOOP_PARENT(unknown)

#undef OPENACC_DIRECTIVE
#undef OPENACC_DIRECTIVE_EXT
#undef OPENACC_BASE_DSA
#undef OPENACC_REDUCTION_BASE_DSA
#undef OPENACC_CLAUSE
#undef OPENACC_PARALLEL_BASE_DSA
#undef OPENACC_LOOP_BASE_DSA
#undef OPENACC_PARALLEL_CLAUSE
#undef OPENACC_LOOP_CLAUSE
#undef OPENACC_PARALLEL_LOOP_CLAUSE
#undef OPENACC_PARALLEL_PARENT
#undef OPENACC_LOOP_PARENT
#undef OPENACC_PARALLEL_LOOP_PARENT
#undef OPENACC_CLAUSE_AND_BASE_DSA
#undef OPENACC_CLAUSE_AND_REDUCTION_BASE_DSA
#undef OPENACC_PARALLEL_CLAUSE_AND_BASE_DSA
#undef OPENACC_LOOP_CLAUSE_AND_BASE_DSA
