; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S < %s | FileCheck %s



target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-unknown"

%struct.ident_t = type { i32, i32, i32, i32, i8* }

@.str = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@0 = private unnamed_addr global %struct.ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@1 = private unnamed_addr global %struct.ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@2 = private unnamed_addr global %struct.ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8

; Function Attrs: noinline nounwind optnone
define void @foo1(i32 %start, i32 %end, i32 %step) #0 {
; CHECK-LABEL: @foo1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[START_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[END_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTTILE_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[START:%.*]], i32* [[START_ADDR]], align 4
; CHECK-NEXT:    store i32 [[END:%.*]], i32* [[END_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    store i32 0, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[END_ADDR]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[START_ADDR]], align 4
; CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[SUB1:%.*]] = sub nsw i32 [[SUB]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[SUB1]], [[TMP3]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[DIV:%.*]] = sdiv i32 [[ADD]], [[TMP4]]
; CHECK-NEXT:    [[SUB2:%.*]] = sub nsw i32 [[DIV]], 1
; CHECK-NEXT:    [[ADD3:%.*]] = add nsw i32 [[SUB2]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], [[ADD3]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END25:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    store i32 [[TMP5]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND4:%.*]]
; CHECK:       for.cond4:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, i32* [[END_ADDR]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[START_ADDR]], align 4
; CHECK-NEXT:    [[SUB5:%.*]] = sub nsw i32 [[TMP7]], [[TMP8]]
; CHECK-NEXT:    [[SUB6:%.*]] = sub nsw i32 [[SUB5]], 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[ADD7:%.*]] = add nsw i32 [[SUB6]], [[TMP9]]
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[DIV8:%.*]] = sdiv i32 [[ADD7]], [[TMP10]]
; CHECK-NEXT:    [[SUB9:%.*]] = sub nsw i32 [[DIV8]], 1
; CHECK-NEXT:    [[ADD10:%.*]] = add nsw i32 [[SUB9]], 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[ADD11:%.*]] = add nsw i32 [[TMP11]], 5
; CHECK-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[ADD10]], [[ADD11]]
; CHECK-NEXT:    br i1 [[CMP12]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[END_ADDR]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* [[START_ADDR]], align 4
; CHECK-NEXT:    [[SUB13:%.*]] = sub nsw i32 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[SUB14:%.*]] = sub nsw i32 [[SUB13]], 1
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[ADD15:%.*]] = add nsw i32 [[SUB14]], [[TMP14]]
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[DIV16:%.*]] = sdiv i32 [[ADD15]], [[TMP15]]
; CHECK-NEXT:    [[SUB17:%.*]] = sub nsw i32 [[DIV16]], 1
; CHECK-NEXT:    [[ADD18:%.*]] = add nsw i32 [[SUB17]], 1
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[ADD19:%.*]] = add nsw i32 [[TMP16]], 5
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ [[ADD18]], [[COND_TRUE]] ], [ [[ADD19]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[CMP20:%.*]] = icmp slt i32 [[TMP6]], [[COND]]
; CHECK-NEXT:    br i1 [[CMP20]], label [[FOR_BODY21:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body21:
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, i32* [[START_ADDR]], align 4
; CHECK-NEXT:    store i32 [[TMP17]], i32* [[I]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    store i32 [[TMP18]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* [[START_ADDR]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP20]], [[TMP21]]
; CHECK-NEXT:    [[ADD22:%.*]] = add nsw i32 [[TMP19]], [[MUL]]
; CHECK-NEXT:    store i32 [[ADD22]], i32* [[I]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = load i32, i32* [[I]], align 4
; CHECK-NEXT:    call void (...) @_Z4bodyz(i32 [[TMP22]])
; CHECK-NEXT:    br label [[FOR_INC:%.*]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[TMP23:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP23]], 1
; CHECK-NEXT:    store i32 [[INC]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND4]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INC23:%.*]]
; CHECK:       for.inc23:
; CHECK-NEXT:    [[TMP24:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[ADD24:%.*]] = add nsw i32 [[TMP24]], 5
; CHECK-NEXT:    store i32 [[ADD24]], i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
; CHECK:       for.end25:
; CHECK-NEXT:    ret void
;
entry:
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %.floor_0.iv.i = alloca i32, align 4
  %.tile_0.iv.i = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  store i32 0, i32* %.floor_0.iv.i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %0 = load i32, i32* %.floor_0.iv.i, align 4
  %1 = load i32, i32* %end.addr, align 4
  %2 = load i32, i32* %start.addr, align 4
  %sub = sub nsw i32 %1, %2
  %sub1 = sub nsw i32 %sub, 1
  %3 = load i32, i32* %step.addr, align 4
  %add = add nsw i32 %sub1, %3
  %4 = load i32, i32* %step.addr, align 4
  %div = sdiv i32 %add, %4
  %sub2 = sub nsw i32 %div, 1
  %add3 = add nsw i32 %sub2, 1
  %cmp = icmp slt i32 %0, %add3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %.floor_0.iv.i, align 4
  store i32 %5, i32* %.tile_0.iv.i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %.tile_0.iv.i, align 4
  %7 = load i32, i32* %end.addr, align 4
  %8 = load i32, i32* %start.addr, align 4
  %sub5 = sub nsw i32 %7, %8
  %sub6 = sub nsw i32 %sub5, 1
  %9 = load i32, i32* %step.addr, align 4
  %add7 = add nsw i32 %sub6, %9
  %10 = load i32, i32* %step.addr, align 4
  %div8 = sdiv i32 %add7, %10
  %sub9 = sub nsw i32 %div8, 1
  %add10 = add nsw i32 %sub9, 1
  %11 = load i32, i32* %.floor_0.iv.i, align 4
  %add11 = add nsw i32 %11, 5
  %cmp12 = icmp slt i32 %add10, %add11
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond4
  %12 = load i32, i32* %end.addr, align 4
  %13 = load i32, i32* %start.addr, align 4
  %sub13 = sub nsw i32 %12, %13
  %sub14 = sub nsw i32 %sub13, 1
  %14 = load i32, i32* %step.addr, align 4
  %add15 = add nsw i32 %sub14, %14
  %15 = load i32, i32* %step.addr, align 4
  %div16 = sdiv i32 %add15, %15
  %sub17 = sub nsw i32 %div16, 1
  %add18 = add nsw i32 %sub17, 1
  br label %cond.end

cond.false:                                       ; preds = %for.cond4
  %16 = load i32, i32* %.floor_0.iv.i, align 4
  %add19 = add nsw i32 %16, 5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add18, %cond.true ], [ %add19, %cond.false ]
  %cmp20 = icmp slt i32 %6, %cond
  br i1 %cmp20, label %for.body21, label %for.end

for.body21:                                       ; preds = %cond.end
  %17 = load i32, i32* %start.addr, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %.tile_0.iv.i, align 4
  store i32 %18, i32* %.tile_0.iv.i, align 4
  %19 = load i32, i32* %start.addr, align 4
  %20 = load i32, i32* %.tile_0.iv.i, align 4
  %21 = load i32, i32* %step.addr, align 4
  %mul = mul nsw i32 %20, %21
  %add22 = add nsw i32 %19, %mul
  store i32 %add22, i32* %i, align 4
  %22 = load i32, i32* %i, align 4
  call void (...) @_Z4bodyz(i32 %22)
  br label %for.inc

for.inc:                                          ; preds = %for.body21
  %23 = load i32, i32* %.tile_0.iv.i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %.tile_0.iv.i, align 4
  br label %for.cond4

for.end:                                          ; preds = %cond.end
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %24 = load i32, i32* %.floor_0.iv.i, align 4
  %add24 = add nsw i32 %24, 5
  store i32 %add24, i32* %.floor_0.iv.i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  ret void
}

declare void @_Z4bodyz(...) #1

; Function Attrs: noinline nounwind optnone
define void @foo2(i32 %start, i32 %end, i32 %step) #0 {
; CHECK-LABEL: @foo2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[START_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[END_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTTILE_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_1_IV_J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTTILE_1_IV_J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[START:%.*]], i32* [[START_ADDR]], align 4
; CHECK-NEXT:    store i32 [[END:%.*]], i32* [[END_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    store i32 0, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], 4
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END30:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    store i32 0, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND1:%.*]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[CMP2:%.*]] = icmp slt i32 [[TMP1]], 4
; CHECK-NEXT:    br i1 [[CMP2]], label [[FOR_BODY3:%.*]], label [[FOR_END27:%.*]]
; CHECK:       for.body3:
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    store i32 [[TMP2]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND4:%.*]]
; CHECK:       for.cond4:
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP4]], 5
; CHECK-NEXT:    [[CMP5:%.*]] = icmp slt i32 4, [[ADD]]
; CHECK-NEXT:    br i1 [[CMP5]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[ADD6:%.*]] = add nsw i32 [[TMP5]], 5
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 4, [[COND_TRUE]] ], [ [[ADD6]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[TMP3]], [[COND]]
; CHECK-NEXT:    br i1 [[CMP7]], label [[FOR_BODY8:%.*]], label [[FOR_END24:%.*]]
; CHECK:       for.body8:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    store i32 [[TMP6]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND9:%.*]]
; CHECK:       for.cond9:
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD10:%.*]] = add nsw i32 [[TMP8]], 5
; CHECK-NEXT:    [[CMP11:%.*]] = icmp slt i32 4, [[ADD10]]
; CHECK-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
; CHECK:       cond.true12:
; CHECK-NEXT:    br label [[COND_END15:%.*]]
; CHECK:       cond.false13:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD14:%.*]] = add nsw i32 [[TMP9]], 5
; CHECK-NEXT:    br label [[COND_END15]]
; CHECK:       cond.end15:
; CHECK-NEXT:    [[COND16:%.*]] = phi i32 [ 4, [[COND_TRUE12]] ], [ [[ADD14]], [[COND_FALSE13]] ]
; CHECK-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[TMP7]], [[COND16]]
; CHECK-NEXT:    br i1 [[CMP17]], label [[FOR_BODY18:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body18:
; CHECK-NEXT:    store i32 7, i32* [[I]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    store i32 [[TMP10]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP11]], 3
; CHECK-NEXT:    [[ADD19:%.*]] = add nsw i32 7, [[MUL]]
; CHECK-NEXT:    store i32 [[ADD19]], i32* [[I]], align 4
; CHECK-NEXT:    store i32 7, i32* [[J]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[MUL20:%.*]] = mul nsw i32 [[TMP13]], 3
; CHECK-NEXT:    [[ADD21:%.*]] = add nsw i32 7, [[MUL20]]
; CHECK-NEXT:    store i32 [[ADD21]], i32* [[J]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[I]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, i32* [[J]], align 4
; CHECK-NEXT:    call void (...) @_Z4bodyz(i32 [[TMP14]], i32 [[TMP15]])
; CHECK-NEXT:    br label [[FOR_INC:%.*]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP16]], 1
; CHECK-NEXT:    store i32 [[INC]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND9]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INC22:%.*]]
; CHECK:       for.inc22:
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[INC23:%.*]] = add nsw i32 [[TMP17]], 1
; CHECK-NEXT:    store i32 [[INC23]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND4]]
; CHECK:       for.end24:
; CHECK-NEXT:    br label [[FOR_INC25:%.*]]
; CHECK:       for.inc25:
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD26:%.*]] = add nsw i32 [[TMP18]], 5
; CHECK-NEXT:    store i32 [[ADD26]], i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND1]]
; CHECK:       for.end27:
; CHECK-NEXT:    br label [[FOR_INC28:%.*]]
; CHECK:       for.inc28:
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    [[ADD29:%.*]] = add nsw i32 [[TMP19]], 5
; CHECK-NEXT:    store i32 [[ADD29]], i32* [[DOTFLOOR_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
; CHECK:       for.end30:
; CHECK-NEXT:    ret void
;
entry:
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %.floor_0.iv.i = alloca i32, align 4
  %.tile_0.iv.i = alloca i32, align 4
  %.floor_1.iv.j = alloca i32, align 4
  %.tile_1.iv.j = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  store i32 0, i32* %.floor_0.iv.i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc28, %entry
  %0 = load i32, i32* %.floor_0.iv.i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end30

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %.floor_1.iv.j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc25, %for.body
  %1 = load i32, i32* %.floor_1.iv.j, align 4
  %cmp2 = icmp slt i32 %1, 4
  br i1 %cmp2, label %for.body3, label %for.end27

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %.floor_0.iv.i, align 4
  store i32 %2, i32* %.tile_0.iv.i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc22, %for.body3
  %3 = load i32, i32* %.tile_0.iv.i, align 4
  %4 = load i32, i32* %.floor_0.iv.i, align 4
  %add = add nsw i32 %4, 5
  %cmp5 = icmp slt i32 4, %add
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond4
  br label %cond.end

cond.false:                                       ; preds = %for.cond4
  %5 = load i32, i32* %.floor_0.iv.i, align 4
  %add6 = add nsw i32 %5, 5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 4, %cond.true ], [ %add6, %cond.false ]
  %cmp7 = icmp slt i32 %3, %cond
  br i1 %cmp7, label %for.body8, label %for.end24

for.body8:                                        ; preds = %cond.end
  %6 = load i32, i32* %.floor_1.iv.j, align 4
  store i32 %6, i32* %.tile_1.iv.j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %7 = load i32, i32* %.tile_1.iv.j, align 4
  %8 = load i32, i32* %.floor_1.iv.j, align 4
  %add10 = add nsw i32 %8, 5
  %cmp11 = icmp slt i32 4, %add10
  br i1 %cmp11, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %for.cond9
  br label %cond.end15

cond.false13:                                     ; preds = %for.cond9
  %9 = load i32, i32* %.floor_1.iv.j, align 4
  %add14 = add nsw i32 %9, 5
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false13, %cond.true12
  %cond16 = phi i32 [ 4, %cond.true12 ], [ %add14, %cond.false13 ]
  %cmp17 = icmp slt i32 %7, %cond16
  br i1 %cmp17, label %for.body18, label %for.end

for.body18:                                       ; preds = %cond.end15
  store i32 7, i32* %i, align 4
  %10 = load i32, i32* %.tile_0.iv.i, align 4
  store i32 %10, i32* %.tile_0.iv.i, align 4
  %11 = load i32, i32* %.tile_0.iv.i, align 4
  %mul = mul nsw i32 %11, 3
  %add19 = add nsw i32 7, %mul
  store i32 %add19, i32* %i, align 4
  store i32 7, i32* %j, align 4
  %12 = load i32, i32* %.tile_1.iv.j, align 4
  store i32 %12, i32* %.tile_1.iv.j, align 4
  %13 = load i32, i32* %.tile_1.iv.j, align 4
  %mul20 = mul nsw i32 %13, 3
  %add21 = add nsw i32 7, %mul20
  store i32 %add21, i32* %j, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %j, align 4
  call void (...) @_Z4bodyz(i32 %14, i32 %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body18
  %16 = load i32, i32* %.tile_1.iv.j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %.tile_1.iv.j, align 4
  br label %for.cond9

for.end:                                          ; preds = %cond.end15
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %17 = load i32, i32* %.tile_0.iv.i, align 4
  %inc23 = add nsw i32 %17, 1
  store i32 %inc23, i32* %.tile_0.iv.i, align 4
  br label %for.cond4

for.end24:                                        ; preds = %cond.end
  br label %for.inc25

for.inc25:                                        ; preds = %for.end24
  %18 = load i32, i32* %.floor_1.iv.j, align 4
  %add26 = add nsw i32 %18, 5
  store i32 %add26, i32* %.floor_1.iv.j, align 4
  br label %for.cond1

for.end27:                                        ; preds = %for.cond1
  br label %for.inc28

for.inc28:                                        ; preds = %for.end27
  %19 = load i32, i32* %.floor_0.iv.i, align 4
  %add29 = add nsw i32 %19, 5
  store i32 %add29, i32* %.floor_0.iv.i, align 4
  br label %for.cond

for.end30:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define void @foo3() #0 {
; CHECK-LABEL: @foo3(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTOMP_IV:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTTILE_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_1_IV_J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTTILE_1_IV_J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_LB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_UB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_STRIDE:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_IS_LAST:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_0_IV_I1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* @1)
; CHECK-NEXT:    store i32 0, i32* [[DOTOMP_LB]], align 4
; CHECK-NEXT:    store i32 0, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    store i32 1, i32* [[DOTOMP_STRIDE]], align 4
; CHECK-NEXT:    store i32 0, i32* [[DOTOMP_IS_LAST]], align 4
; CHECK-NEXT:    call void @__kmpc_for_static_init_4(%struct.ident_t* @0, i32 [[TMP0]], i32 34, i32* [[DOTOMP_IS_LAST]], i32* [[DOTOMP_LB]], i32* [[DOTOMP_UB]], i32* [[DOTOMP_STRIDE]], i32 1, i32 1)
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[TMP1]], 0
; CHECK-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 0, [[COND_TRUE]] ], [ [[TMP2]], [[COND_FALSE]] ]
; CHECK-NEXT:    store i32 [[COND]], i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[DOTOMP_LB]], align 4
; CHECK-NEXT:    store i32 [[TMP3]], i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    br label [[OMP_INNER_FOR_COND:%.*]]
; CHECK:       omp.inner.for.cond:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    [[CMP2:%.*]] = icmp sle i32 [[TMP4]], [[TMP5]]
; CHECK-NEXT:    br i1 [[CMP2]], label [[OMP_INNER_FOR_BODY:%.*]], label [[OMP_INNER_FOR_END:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP6]], 5
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 0, [[MUL]]
; CHECK-NEXT:    store i32 [[ADD]], i32* [[DOTFLOOR_0_IV_I1]], align 4
; CHECK-NEXT:    store i32 0, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[CMP3:%.*]] = icmp slt i32 [[TMP7]], 4
; CHECK-NEXT:    br i1 [[CMP3]], label [[FOR_BODY:%.*]], label [[FOR_END33:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I1]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND4:%.*]]
; CHECK:       for.cond4:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I1]], align 4
; CHECK-NEXT:    [[ADD5:%.*]] = add nsw i32 [[TMP10]], 5
; CHECK-NEXT:    [[CMP6:%.*]] = icmp slt i32 4, [[ADD5]]
; CHECK-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
; CHECK:       cond.true7:
; CHECK-NEXT:    br label [[COND_END10:%.*]]
; CHECK:       cond.false8:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I1]], align 4
; CHECK-NEXT:    [[ADD9:%.*]] = add nsw i32 [[TMP11]], 5
; CHECK-NEXT:    br label [[COND_END10]]
; CHECK:       cond.end10:
; CHECK-NEXT:    [[COND11:%.*]] = phi i32 [ 4, [[COND_TRUE7]] ], [ [[ADD9]], [[COND_FALSE8]] ]
; CHECK-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[TMP9]], [[COND11]]
; CHECK-NEXT:    br i1 [[CMP12]], label [[FOR_BODY13:%.*]], label [[FOR_END30:%.*]]
; CHECK:       for.body13:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND14:%.*]]
; CHECK:       for.cond14:
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD15:%.*]] = add nsw i32 [[TMP14]], 5
; CHECK-NEXT:    [[CMP16:%.*]] = icmp slt i32 4, [[ADD15]]
; CHECK-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
; CHECK:       cond.true17:
; CHECK-NEXT:    br label [[COND_END20:%.*]]
; CHECK:       cond.false18:
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD19:%.*]] = add nsw i32 [[TMP15]], 5
; CHECK-NEXT:    br label [[COND_END20]]
; CHECK:       cond.end20:
; CHECK-NEXT:    [[COND21:%.*]] = phi i32 [ 4, [[COND_TRUE17]] ], [ [[ADD19]], [[COND_FALSE18]] ]
; CHECK-NEXT:    [[CMP22:%.*]] = icmp slt i32 [[TMP13]], [[COND21]]
; CHECK-NEXT:    br i1 [[CMP22]], label [[FOR_BODY23:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body23:
; CHECK-NEXT:    store i32 7, i32* [[I]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    store i32 [[TMP16]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[MUL24:%.*]] = mul nsw i32 [[TMP17]], 3
; CHECK-NEXT:    [[ADD25:%.*]] = add nsw i32 7, [[MUL24]]
; CHECK-NEXT:    store i32 [[ADD25]], i32* [[I]], align 4
; CHECK-NEXT:    store i32 7, i32* [[J]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    store i32 [[TMP18]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[MUL26:%.*]] = mul nsw i32 [[TMP19]], 3
; CHECK-NEXT:    [[ADD27:%.*]] = add nsw i32 7, [[MUL26]]
; CHECK-NEXT:    store i32 [[ADD27]], i32* [[J]], align 4
; CHECK-NEXT:    br label [[FOR_INC:%.*]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[TMP20:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP20]], 1
; CHECK-NEXT:    store i32 [[INC]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND14]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INC28:%.*]]
; CHECK:       for.inc28:
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[INC29:%.*]] = add nsw i32 [[TMP21]], 1
; CHECK-NEXT:    store i32 [[INC29]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND4]]
; CHECK:       for.end30:
; CHECK-NEXT:    br label [[FOR_INC31:%.*]]
; CHECK:       for.inc31:
; CHECK-NEXT:    [[TMP22:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD32:%.*]] = add nsw i32 [[TMP22]], 5
; CHECK-NEXT:    store i32 [[ADD32]], i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
; CHECK:       for.end33:
; CHECK-NEXT:    br label [[OMP_BODY_CONTINUE:%.*]]
; CHECK:       omp.body.continue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC:%.*]]
; CHECK:       omp.inner.for.inc:
; CHECK-NEXT:    [[TMP23:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[ADD34:%.*]] = add nsw i32 [[TMP23]], 1
; CHECK-NEXT:    store i32 [[ADD34]], i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    br label [[OMP_INNER_FOR_COND]]
; CHECK:       omp.inner.for.end:
; CHECK-NEXT:    br label [[OMP_LOOP_EXIT:%.*]]
; CHECK:       omp.loop.exit:
; CHECK-NEXT:    call void @__kmpc_for_static_fini(%struct.ident_t* @0, i32 [[TMP0]])
; CHECK-NEXT:    call void @__kmpc_barrier(%struct.ident_t* @2, i32 [[TMP0]])
; CHECK-NEXT:    ret void
;
entry:
  %.omp.iv = alloca i32, align 4
  %.floor_0.iv.i = alloca i32, align 4
  %.tile_0.iv.i = alloca i32, align 4
  %.floor_1.iv.j = alloca i32, align 4
  %.tile_1.iv.j = alloca i32, align 4
  %tmp = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.floor_0.iv.i1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = call i32 @__kmpc_global_thread_num(%struct.ident_t* @1)
  store i32 0, i32* %.omp.lb, align 4
  store i32 0, i32* %.omp.ub, align 4
  store i32 1, i32* %.omp.stride, align 4
  store i32 0, i32* %.omp.is_last, align 4
  call void @__kmpc_for_static_init_4(%struct.ident_t* @0, i32 %0, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1)
  %1 = load i32, i32* %.omp.ub, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %.omp.ub, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %2, %cond.false ]
  store i32 %cond, i32* %.omp.ub, align 4
  %3 = load i32, i32* %.omp.lb, align 4
  store i32 %3, i32* %.omp.iv, align 4
  br label %omp.inner.for.cond

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %4 = load i32, i32* %.omp.iv, align 4
  %5 = load i32, i32* %.omp.ub, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %omp.inner.for.body, label %omp.inner.for.end

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %6 = load i32, i32* %.omp.iv, align 4
  %mul = mul nsw i32 %6, 5
  %add = add nsw i32 0, %mul
  store i32 %add, i32* %.floor_0.iv.i1, align 4
  store i32 0, i32* %.floor_1.iv.j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc31, %omp.inner.for.body
  %7 = load i32, i32* %.floor_1.iv.j, align 4
  %cmp3 = icmp slt i32 %7, 4
  br i1 %cmp3, label %for.body, label %for.end33

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %.floor_0.iv.i1, align 4
  store i32 %8, i32* %.tile_0.iv.i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc28, %for.body
  %9 = load i32, i32* %.tile_0.iv.i, align 4
  %10 = load i32, i32* %.floor_0.iv.i1, align 4
  %add5 = add nsw i32 %10, 5
  %cmp6 = icmp slt i32 4, %add5
  br i1 %cmp6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %for.cond4
  br label %cond.end10

cond.false8:                                      ; preds = %for.cond4
  %11 = load i32, i32* %.floor_0.iv.i1, align 4
  %add9 = add nsw i32 %11, 5
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false8, %cond.true7
  %cond11 = phi i32 [ 4, %cond.true7 ], [ %add9, %cond.false8 ]
  %cmp12 = icmp slt i32 %9, %cond11
  br i1 %cmp12, label %for.body13, label %for.end30

for.body13:                                       ; preds = %cond.end10
  %12 = load i32, i32* %.floor_1.iv.j, align 4
  store i32 %12, i32* %.tile_1.iv.j, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body13
  %13 = load i32, i32* %.tile_1.iv.j, align 4
  %14 = load i32, i32* %.floor_1.iv.j, align 4
  %add15 = add nsw i32 %14, 5
  %cmp16 = icmp slt i32 4, %add15
  br i1 %cmp16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %for.cond14
  br label %cond.end20

cond.false18:                                     ; preds = %for.cond14
  %15 = load i32, i32* %.floor_1.iv.j, align 4
  %add19 = add nsw i32 %15, 5
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false18, %cond.true17
  %cond21 = phi i32 [ 4, %cond.true17 ], [ %add19, %cond.false18 ]
  %cmp22 = icmp slt i32 %13, %cond21
  br i1 %cmp22, label %for.body23, label %for.end

for.body23:                                       ; preds = %cond.end20
  store i32 7, i32* %i, align 4
  %16 = load i32, i32* %.tile_0.iv.i, align 4
  store i32 %16, i32* %.tile_0.iv.i, align 4
  %17 = load i32, i32* %.tile_0.iv.i, align 4
  %mul24 = mul nsw i32 %17, 3
  %add25 = add nsw i32 7, %mul24
  store i32 %add25, i32* %i, align 4
  store i32 7, i32* %j, align 4
  %18 = load i32, i32* %.tile_1.iv.j, align 4
  store i32 %18, i32* %.tile_1.iv.j, align 4
  %19 = load i32, i32* %.tile_1.iv.j, align 4
  %mul26 = mul nsw i32 %19, 3
  %add27 = add nsw i32 7, %mul26
  store i32 %add27, i32* %j, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body23
  %20 = load i32, i32* %.tile_1.iv.j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %.tile_1.iv.j, align 4
  br label %for.cond14

for.end:                                          ; preds = %cond.end20
  br label %for.inc28

for.inc28:                                        ; preds = %for.end
  %21 = load i32, i32* %.tile_0.iv.i, align 4
  %inc29 = add nsw i32 %21, 1
  store i32 %inc29, i32* %.tile_0.iv.i, align 4
  br label %for.cond4

for.end30:                                        ; preds = %cond.end10
  br label %for.inc31

for.inc31:                                        ; preds = %for.end30
  %22 = load i32, i32* %.floor_1.iv.j, align 4
  %add32 = add nsw i32 %22, 5
  store i32 %add32, i32* %.floor_1.iv.j, align 4
  br label %for.cond

for.end33:                                        ; preds = %for.cond
  br label %omp.body.continue

omp.body.continue:                                ; preds = %for.end33
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %23 = load i32, i32* %.omp.iv, align 4
  %add34 = add nsw i32 %23, 1
  store i32 %add34, i32* %.omp.iv, align 4
  br label %omp.inner.for.cond

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  call void @__kmpc_for_static_fini(%struct.ident_t* @0, i32 %0)
  call void @__kmpc_barrier(%struct.ident_t* @2, i32 %0)
  ret void
}

declare i32 @__kmpc_global_thread_num(%struct.ident_t*)

declare void @__kmpc_for_static_init_4(%struct.ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)

declare void @__kmpc_for_static_fini(%struct.ident_t*, i32)

declare void @__kmpc_barrier(%struct.ident_t*, i32)

; Function Attrs: noinline nounwind optnone
define void @foo4() #0 {
; CHECK-LABEL: @foo4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTOMP_IV:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTTILE_0_IV_I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_1_IV_J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTTILE_1_IV_J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_LB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_UB:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_STRIDE:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTOMP_IS_LAST:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[K:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[DOTFLOOR_0_IV_I2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* @1)
; CHECK-NEXT:    store i32 0, i32* [[DOTOMP_LB]], align 4
; CHECK-NEXT:    store i32 3, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    store i32 1, i32* [[DOTOMP_STRIDE]], align 4
; CHECK-NEXT:    store i32 0, i32* [[DOTOMP_IS_LAST]], align 4
; CHECK-NEXT:    call void @__kmpc_for_static_init_4(%struct.ident_t* @0, i32 [[TMP0]], i32 34, i32* [[DOTOMP_IS_LAST]], i32* [[DOTOMP_LB]], i32* [[DOTOMP_UB]], i32* [[DOTOMP_STRIDE]], i32 1, i32 1)
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[TMP1]], 3
; CHECK-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 3, [[COND_TRUE]] ], [ [[TMP2]], [[COND_FALSE]] ]
; CHECK-NEXT:    store i32 [[COND]], i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[DOTOMP_LB]], align 4
; CHECK-NEXT:    store i32 [[TMP3]], i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    br label [[OMP_INNER_FOR_COND:%.*]]
; CHECK:       omp.inner.for.cond:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, i32* [[DOTOMP_UB]], align 4
; CHECK-NEXT:    [[CMP3:%.*]] = icmp sle i32 [[TMP4]], [[TMP5]]
; CHECK-NEXT:    br i1 [[CMP3]], label [[OMP_INNER_FOR_BODY:%.*]], label [[OMP_INNER_FOR_END:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[DIV:%.*]] = sdiv i32 [[TMP6]], 1
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[DIV]], 3
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 7, [[MUL]]
; CHECK-NEXT:    store i32 [[ADD]], i32* [[K]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[DIV4:%.*]] = sdiv i32 [[TMP8]], 1
; CHECK-NEXT:    [[MUL5:%.*]] = mul nsw i32 [[DIV4]], 1
; CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[TMP7]], [[MUL5]]
; CHECK-NEXT:    [[MUL6:%.*]] = mul nsw i32 [[SUB]], 5
; CHECK-NEXT:    [[ADD7:%.*]] = add nsw i32 0, [[MUL6]]
; CHECK-NEXT:    store i32 [[ADD7]], i32* [[DOTFLOOR_0_IV_I2]], align 4
; CHECK-NEXT:    store i32 0, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[CMP8:%.*]] = icmp slt i32 [[TMP9]], 4
; CHECK-NEXT:    br i1 [[CMP8]], label [[FOR_BODY:%.*]], label [[FOR_END38:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I2]], align 4
; CHECK-NEXT:    store i32 [[TMP10]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND9:%.*]]
; CHECK:       for.cond9:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I2]], align 4
; CHECK-NEXT:    [[ADD10:%.*]] = add nsw i32 [[TMP12]], 5
; CHECK-NEXT:    [[CMP11:%.*]] = icmp slt i32 4, [[ADD10]]
; CHECK-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
; CHECK:       cond.true12:
; CHECK-NEXT:    br label [[COND_END15:%.*]]
; CHECK:       cond.false13:
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* [[DOTFLOOR_0_IV_I2]], align 4
; CHECK-NEXT:    [[ADD14:%.*]] = add nsw i32 [[TMP13]], 5
; CHECK-NEXT:    br label [[COND_END15]]
; CHECK:       cond.end15:
; CHECK-NEXT:    [[COND16:%.*]] = phi i32 [ 4, [[COND_TRUE12]] ], [ [[ADD14]], [[COND_FALSE13]] ]
; CHECK-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[TMP11]], [[COND16]]
; CHECK-NEXT:    br i1 [[CMP17]], label [[FOR_BODY18:%.*]], label [[FOR_END35:%.*]]
; CHECK:       for.body18:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    store i32 [[TMP14]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND19:%.*]]
; CHECK:       for.cond19:
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD20:%.*]] = add nsw i32 [[TMP16]], 5
; CHECK-NEXT:    [[CMP21:%.*]] = icmp slt i32 4, [[ADD20]]
; CHECK-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
; CHECK:       cond.true22:
; CHECK-NEXT:    br label [[COND_END25:%.*]]
; CHECK:       cond.false23:
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD24:%.*]] = add nsw i32 [[TMP17]], 5
; CHECK-NEXT:    br label [[COND_END25]]
; CHECK:       cond.end25:
; CHECK-NEXT:    [[COND26:%.*]] = phi i32 [ 4, [[COND_TRUE22]] ], [ [[ADD24]], [[COND_FALSE23]] ]
; CHECK-NEXT:    [[CMP27:%.*]] = icmp slt i32 [[TMP15]], [[COND26]]
; CHECK-NEXT:    br i1 [[CMP27]], label [[FOR_BODY28:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body28:
; CHECK-NEXT:    store i32 7, i32* [[I]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    store i32 [[TMP18]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[MUL29:%.*]] = mul nsw i32 [[TMP19]], 3
; CHECK-NEXT:    [[ADD30:%.*]] = add nsw i32 7, [[MUL29]]
; CHECK-NEXT:    store i32 [[ADD30]], i32* [[I]], align 4
; CHECK-NEXT:    store i32 7, i32* [[J]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    store i32 [[TMP20]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[MUL31:%.*]] = mul nsw i32 [[TMP21]], 3
; CHECK-NEXT:    [[ADD32:%.*]] = add nsw i32 7, [[MUL31]]
; CHECK-NEXT:    store i32 [[ADD32]], i32* [[J]], align 4
; CHECK-NEXT:    br label [[FOR_INC:%.*]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[TMP22:%.*]] = load i32, i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP22]], 1
; CHECK-NEXT:    store i32 [[INC]], i32* [[DOTTILE_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND19]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INC33:%.*]]
; CHECK:       for.inc33:
; CHECK-NEXT:    [[TMP23:%.*]] = load i32, i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    [[INC34:%.*]] = add nsw i32 [[TMP23]], 1
; CHECK-NEXT:    store i32 [[INC34]], i32* [[DOTTILE_0_IV_I]], align 4
; CHECK-NEXT:    br label [[FOR_COND9]]
; CHECK:       for.end35:
; CHECK-NEXT:    br label [[FOR_INC36:%.*]]
; CHECK:       for.inc36:
; CHECK-NEXT:    [[TMP24:%.*]] = load i32, i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    [[ADD37:%.*]] = add nsw i32 [[TMP24]], 5
; CHECK-NEXT:    store i32 [[ADD37]], i32* [[DOTFLOOR_1_IV_J]], align 4
; CHECK-NEXT:    br label [[FOR_COND]]
; CHECK:       for.end38:
; CHECK-NEXT:    br label [[OMP_BODY_CONTINUE:%.*]]
; CHECK:       omp.body.continue:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC:%.*]]
; CHECK:       omp.inner.for.inc:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    [[ADD39:%.*]] = add nsw i32 [[TMP25]], 1
; CHECK-NEXT:    store i32 [[ADD39]], i32* [[DOTOMP_IV]], align 4
; CHECK-NEXT:    br label [[OMP_INNER_FOR_COND]]
; CHECK:       omp.inner.for.end:
; CHECK-NEXT:    br label [[OMP_LOOP_EXIT:%.*]]
; CHECK:       omp.loop.exit:
; CHECK-NEXT:    call void @__kmpc_for_static_fini(%struct.ident_t* @0, i32 [[TMP0]])
; CHECK-NEXT:    call void @__kmpc_barrier(%struct.ident_t* @2, i32 [[TMP0]])
; CHECK-NEXT:    ret void
;
entry:
  %.omp.iv = alloca i32, align 4
  %.floor_0.iv.i = alloca i32, align 4
  %.tile_0.iv.i = alloca i32, align 4
  %.floor_1.iv.j = alloca i32, align 4
  %.tile_1.iv.j = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp1 = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %k = alloca i32, align 4
  %.floor_0.iv.i2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = call i32 @__kmpc_global_thread_num(%struct.ident_t* @1)
  store i32 0, i32* %.omp.lb, align 4
  store i32 3, i32* %.omp.ub, align 4
  store i32 1, i32* %.omp.stride, align 4
  store i32 0, i32* %.omp.is_last, align 4
  call void @__kmpc_for_static_init_4(%struct.ident_t* @0, i32 %0, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1)
  %1 = load i32, i32* %.omp.ub, align 4
  %cmp = icmp sgt i32 %1, 3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %.omp.ub, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 3, %cond.true ], [ %2, %cond.false ]
  store i32 %cond, i32* %.omp.ub, align 4
  %3 = load i32, i32* %.omp.lb, align 4
  store i32 %3, i32* %.omp.iv, align 4
  br label %omp.inner.for.cond

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %4 = load i32, i32* %.omp.iv, align 4
  %5 = load i32, i32* %.omp.ub, align 4
  %cmp3 = icmp sle i32 %4, %5
  br i1 %cmp3, label %omp.inner.for.body, label %omp.inner.for.end

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %6 = load i32, i32* %.omp.iv, align 4
  %div = sdiv i32 %6, 1
  %mul = mul nsw i32 %div, 3
  %add = add nsw i32 7, %mul
  store i32 %add, i32* %k, align 4
  %7 = load i32, i32* %.omp.iv, align 4
  %8 = load i32, i32* %.omp.iv, align 4
  %div4 = sdiv i32 %8, 1
  %mul5 = mul nsw i32 %div4, 1
  %sub = sub nsw i32 %7, %mul5
  %mul6 = mul nsw i32 %sub, 5
  %add7 = add nsw i32 0, %mul6
  store i32 %add7, i32* %.floor_0.iv.i2, align 4
  store i32 0, i32* %.floor_1.iv.j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %omp.inner.for.body
  %9 = load i32, i32* %.floor_1.iv.j, align 4
  %cmp8 = icmp slt i32 %9, 4
  br i1 %cmp8, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %.floor_0.iv.i2, align 4
  store i32 %10, i32* %.tile_0.iv.i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc33, %for.body
  %11 = load i32, i32* %.tile_0.iv.i, align 4
  %12 = load i32, i32* %.floor_0.iv.i2, align 4
  %add10 = add nsw i32 %12, 5
  %cmp11 = icmp slt i32 4, %add10
  br i1 %cmp11, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %for.cond9
  br label %cond.end15

cond.false13:                                     ; preds = %for.cond9
  %13 = load i32, i32* %.floor_0.iv.i2, align 4
  %add14 = add nsw i32 %13, 5
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false13, %cond.true12
  %cond16 = phi i32 [ 4, %cond.true12 ], [ %add14, %cond.false13 ]
  %cmp17 = icmp slt i32 %11, %cond16
  br i1 %cmp17, label %for.body18, label %for.end35

for.body18:                                       ; preds = %cond.end15
  %14 = load i32, i32* %.floor_1.iv.j, align 4
  store i32 %14, i32* %.tile_1.iv.j, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc, %for.body18
  %15 = load i32, i32* %.tile_1.iv.j, align 4
  %16 = load i32, i32* %.floor_1.iv.j, align 4
  %add20 = add nsw i32 %16, 5
  %cmp21 = icmp slt i32 4, %add20
  br i1 %cmp21, label %cond.true22, label %cond.false23

cond.true22:                                      ; preds = %for.cond19
  br label %cond.end25

cond.false23:                                     ; preds = %for.cond19
  %17 = load i32, i32* %.floor_1.iv.j, align 4
  %add24 = add nsw i32 %17, 5
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false23, %cond.true22
  %cond26 = phi i32 [ 4, %cond.true22 ], [ %add24, %cond.false23 ]
  %cmp27 = icmp slt i32 %15, %cond26
  br i1 %cmp27, label %for.body28, label %for.end

for.body28:                                       ; preds = %cond.end25
  store i32 7, i32* %i, align 4
  %18 = load i32, i32* %.tile_0.iv.i, align 4
  store i32 %18, i32* %.tile_0.iv.i, align 4
  %19 = load i32, i32* %.tile_0.iv.i, align 4
  %mul29 = mul nsw i32 %19, 3
  %add30 = add nsw i32 7, %mul29
  store i32 %add30, i32* %i, align 4
  store i32 7, i32* %j, align 4
  %20 = load i32, i32* %.tile_1.iv.j, align 4
  store i32 %20, i32* %.tile_1.iv.j, align 4
  %21 = load i32, i32* %.tile_1.iv.j, align 4
  %mul31 = mul nsw i32 %21, 3
  %add32 = add nsw i32 7, %mul31
  store i32 %add32, i32* %j, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body28
  %22 = load i32, i32* %.tile_1.iv.j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %.tile_1.iv.j, align 4
  br label %for.cond19

for.end:                                          ; preds = %cond.end25
  br label %for.inc33

for.inc33:                                        ; preds = %for.end
  %23 = load i32, i32* %.tile_0.iv.i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %.tile_0.iv.i, align 4
  br label %for.cond9

for.end35:                                        ; preds = %cond.end15
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %24 = load i32, i32* %.floor_1.iv.j, align 4
  %add37 = add nsw i32 %24, 5
  store i32 %add37, i32* %.floor_1.iv.j, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  br label %omp.body.continue

omp.body.continue:                                ; preds = %for.end38
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %25 = load i32, i32* %.omp.iv, align 4
  %add39 = add nsw i32 %25, 1
  store i32 %add39, i32* %.omp.iv, align 4
  br label %omp.inner.for.cond

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  call void @__kmpc_for_static_fini(%struct.ident_t* @0, i32 %0)
  call void @__kmpc_barrier(%struct.ident_t* @2, i32 %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define void @foo5() #0 {
; CHECK-LABEL: @foo5(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* @1, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*))
; CHECK-NEXT:    ret void
;
entry:
  call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%struct.ident_t* @1, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*))
  ret void
}

; Function Attrs: noinline norecurse nounwind optnone
define internal void @.omp_outlined.(i32* noalias %.global_tid., i32* noalias %.bound_tid.) #2 {
entry:
  %.global_tid..addr = alloca i32*, align 8
  %.bound_tid..addr = alloca i32*, align 8
  %.omp.iv = alloca i32, align 4
  %.floor_0.iv.i = alloca i32, align 4
  %.tile_0.iv.i = alloca i32, align 4
  %tmp = alloca i32, align 4
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %.floor_0.iv.i1 = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %.global_tid., i32** %.global_tid..addr, align 8
  store i32* %.bound_tid., i32** %.bound_tid..addr, align 8
  store i32 0, i32* %.omp.lb, align 4
  store i32 0, i32* %.omp.ub, align 4
  store i32 1, i32* %.omp.stride, align 4
  store i32 0, i32* %.omp.is_last, align 4
  %0 = load i32*, i32** %.global_tid..addr, align 8
  %1 = load i32, i32* %0, align 4
  call void @__kmpc_for_static_init_4(%struct.ident_t* @0, i32 %1, i32 34, i32* %.omp.is_last, i32* %.omp.lb, i32* %.omp.ub, i32* %.omp.stride, i32 1, i32 1)
  %2 = load i32, i32* %.omp.ub, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %.omp.ub, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  store i32 %cond, i32* %.omp.ub, align 4
  %4 = load i32, i32* %.omp.lb, align 4
  store i32 %4, i32* %.omp.iv, align 4
  br label %omp.inner.for.cond

omp.inner.for.cond:                               ; preds = %omp.inner.for.inc, %cond.end
  %5 = load i32, i32* %.omp.iv, align 4
  %6 = load i32, i32* %.omp.ub, align 4
  %cmp2 = icmp sle i32 %5, %6
  br i1 %cmp2, label %omp.inner.for.body, label %omp.inner.for.end

omp.inner.for.body:                               ; preds = %omp.inner.for.cond
  %7 = load i32, i32* %.omp.iv, align 4
  %mul = mul nsw i32 %7, 5
  %add = add nsw i32 0, %mul
  store i32 %add, i32* %.floor_0.iv.i1, align 4
  %8 = load i32, i32* %.floor_0.iv.i1, align 4
  store i32 %8, i32* %.tile_0.iv.i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %omp.inner.for.body
  %9 = load i32, i32* %.tile_0.iv.i, align 4
  %10 = load i32, i32* %.floor_0.iv.i1, align 4
  %add3 = add nsw i32 %10, 5
  %cmp4 = icmp slt i32 4, %add3
  br i1 %cmp4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %for.cond
  br label %cond.end8

cond.false6:                                      ; preds = %for.cond
  %11 = load i32, i32* %.floor_0.iv.i1, align 4
  %add7 = add nsw i32 %11, 5
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true5
  %cond9 = phi i32 [ 4, %cond.true5 ], [ %add7, %cond.false6 ]
  %cmp10 = icmp slt i32 %9, %cond9
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end8
  store i32 7, i32* %i, align 4
  %12 = load i32, i32* %.tile_0.iv.i, align 4
  store i32 %12, i32* %.tile_0.iv.i, align 4
  %13 = load i32, i32* %.tile_0.iv.i, align 4
  %mul11 = mul nsw i32 %13, 3
  %add12 = add nsw i32 7, %mul11
  store i32 %add12, i32* %i, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %.tile_0.iv.i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %.tile_0.iv.i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end8
  br label %omp.body.continue

omp.body.continue:                                ; preds = %for.end
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.body.continue
  %15 = load i32, i32* %.omp.iv, align 4
  %add13 = add nsw i32 %15, 1
  store i32 %add13, i32* %.omp.iv, align 4
  br label %omp.inner.for.cond

omp.inner.for.end:                                ; preds = %omp.inner.for.cond
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.end
  call void @__kmpc_for_static_fini(%struct.ident_t* @0, i32 %1)
  ret void
}

declare !callback !2 void @__kmpc_fork_call(%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...)

; Function Attrs: noinline nounwind optnone
define void @tfoo6() #0 {
; CHECK-LABEL: @tfoo6(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @_Z4foo6IiLi3ELi5EEvT_S0_(i32 0, i32 42)
; CHECK-NEXT:    ret void
;
entry:
  call void @_Z4foo6IiLi3ELi5EEvT_S0_(i32 0, i32 42)
  ret void
}

declare void @_Z4foo6IiLi3ELi5EEvT_S0_(i32, i32) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline norecurse nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (C:/Users/meinersbur/src/llvm-project/clang 7eeb90152859f254fe4e9182c749ab065d33c89d)"}
!2 = !{!3}
!3 = !{i64 2, i64 -1, i64 -1, i1 true}
